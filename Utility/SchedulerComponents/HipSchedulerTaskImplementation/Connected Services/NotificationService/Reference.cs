//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BC.Integration.Utility.NotificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/InitializeNotification", ReplyAction="http://tempuri.org/INotificationService/InitializeNotificationResponse")]
        bool InitializeNotification(string processName, string serviceId, string issueCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/InitializeNotification", ReplyAction="http://tempuri.org/INotificationService/InitializeNotificationResponse")]
        System.Threading.Tasks.Task<bool> InitializeNotificationAsync(string processName, string serviceId, string issueCategory);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : BC.Integration.Utility.NotificationService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<BC.Integration.Utility.NotificationService.INotificationService>, BC.Integration.Utility.NotificationService.INotificationService {
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InitializeNotification(string processName, string serviceId, string issueCategory) {
            return base.Channel.InitializeNotification(processName, serviceId, issueCategory);
        }
        
        public System.Threading.Tasks.Task<bool> InitializeNotificationAsync(string processName, string serviceId, string issueCategory) {
            return base.Channel.InitializeNotificationAsync(processName, serviceId, issueCategory);
        }
    }
}
