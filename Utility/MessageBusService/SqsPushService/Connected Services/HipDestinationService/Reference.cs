//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BC.Integration.Utility.HipDestinationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HipDestinationService.IService")]
    public interface IService {
        
        // CODEGEN: Generating message contract since the operation ReceiveMessage is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveMessage", ReplyAction="http://tempuri.org/IService/ReceiveMessageResponse")]
        BC.Integration.Utility.HipDestinationService.ReceiveMessageResponse ReceiveMessage(BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveMessage", ReplyAction="http://tempuri.org/IService/ReceiveMessageResponse")]
        System.Threading.Tasks.Task<BC.Integration.Utility.HipDestinationService.ReceiveMessageResponse> ReceiveMessageAsync(BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReceiveMessageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public string @string;
        
        public ReceiveMessageRequest() {
        }
        
        public ReceiveMessageRequest(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReceiveMessageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<bool> boolean;
        
        public ReceiveMessageResponse() {
        }
        
        public ReceiveMessageResponse(System.Nullable<bool> boolean) {
            this.boolean = boolean;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : BC.Integration.Utility.HipDestinationService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<BC.Integration.Utility.HipDestinationService.IService>, BC.Integration.Utility.HipDestinationService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BC.Integration.Utility.HipDestinationService.ReceiveMessageResponse BC.Integration.Utility.HipDestinationService.IService.ReceiveMessage(BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest request) {
            return base.Channel.ReceiveMessage(request);
        }
        
        public System.Nullable<bool> ReceiveMessage(string @string) {
            BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest inValue = new BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest();
            inValue.@string = @string;
            BC.Integration.Utility.HipDestinationService.ReceiveMessageResponse retVal = ((BC.Integration.Utility.HipDestinationService.IService)(this)).ReceiveMessage(inValue);
            return retVal.boolean;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<BC.Integration.Utility.HipDestinationService.ReceiveMessageResponse> BC.Integration.Utility.HipDestinationService.IService.ReceiveMessageAsync(BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest request) {
            return base.Channel.ReceiveMessageAsync(request);
        }
        
        public System.Threading.Tasks.Task<BC.Integration.Utility.HipDestinationService.ReceiveMessageResponse> ReceiveMessageAsync(string @string) {
            BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest inValue = new BC.Integration.Utility.HipDestinationService.ReceiveMessageRequest();
            inValue.@string = @string;
            return ((BC.Integration.Utility.HipDestinationService.IService)(this)).ReceiveMessageAsync(inValue);
        }
    }
}
